{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","size","useState","J","setJ","delta1","setDelta1","delta2","setDelta2","plotE","useMemo","CENTER","Vector2","theta1_angle","Array","from","length","_","i","theta2_angle","E","S1","S2","minE","Infinity","minTheta1Angle","minTheta2Angle","j","dot","y","rotateAround","Math","PI","data","z","x","type","ncontours","line","width","layout","height","title","JForm","setJForm","delta1Form","setDelta1Form","delta2Form","setDelta2Form","handleChange","e","target","name","value","onSubmit","preventDefault","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf2373b4.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport React, { useMemo, useState } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { Vector2 } from \"three\";\n\nconst App = () => {\n  const size = 360;\n\n  const [J, setJ] = useState(3e-3);\n  const [delta1, setDelta1] = useState(-15e-6);\n  const [delta2, setDelta2] = useState(12e-6);\n\n  const plotE = useMemo(() => {\n    const CENTER = new Vector2(0, 0);\n    const theta1_angle = Array.from(\n      { length: size },\n      (_, i) => (360 / size) * i\n    );\n    const theta2_angle = Array.from(\n      { length: size },\n      (_, i) => (360 / size) * i\n    );\n    let E = Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => 0)\n    );\n    const S1 = new Vector2(5, 0);\n    const S2 = new Vector2(5, 0);\n    let minE = Infinity;\n    let minTheta1Angle = 0;\n    let minTheta2Angle = 0;\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        E[i][j] = J * S1.dot(S2) + delta1 * S1.y * S1.y + delta2 * S2.y * S2.y;\n        if (E[i][j] - minE < -1e-12) {\n          minE = E[i][j];\n          minTheta1Angle = theta1_angle[i];\n          minTheta2Angle = theta2_angle[j];\n        }\n        S2.rotateAround(CENTER, ((360 / size) * Math.PI) / 180);\n      }\n      S1.rotateAround(CENTER, ((360 / size) * Math.PI) / 180);\n    }\n    return (\n      <>\n        <div>minE: {minE}</div>\n        <div>θ1: {minTheta1Angle}</div>\n        <div>θ2: {minTheta2Angle}</div>\n        <Plot\n          data={[\n            {\n              z: E,\n              x: theta1_angle,\n              y: theta2_angle,\n              type: \"contour\",\n              ncontours: 360,\n              line: { width: 0 },\n            },\n          ]}\n          layout={{\n            width: 1080,\n            height: 720,\n            title: \"H = JS1･S2 + Δ1|S1z|^2 + Δ2|S2z|^2\",\n          }}\n        />\n      </>\n    );\n  }, [J, delta1, delta2]);\n\n  const [JForm, setJForm] = useState(J);\n  const [delta1Form, setDelta1Form] = useState(delta1);\n  const [delta2Form, setDelta2Form] = useState(delta2);\n  const handleChange = (e) => {\n    switch (e.target.name) {\n      case \"J\":\n        setJForm(e.target.value);\n        break;\n      case \"delta1\":\n        setDelta1Form(e.target.value);\n        break;\n      case \"delta2\":\n        setDelta2Form(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setJ(JForm);\n    setDelta1(delta1Form);\n    setDelta2(delta2Form);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          J\n          <input type=\"text\" name=\"J\" value={JForm} onChange={handleChange} />\n        </label>\n        <br />\n        <label>\n          Δ1\n          <input\n            type=\"text\"\n            name=\"delta1\"\n            value={delta1Form}\n            onChange={handleChange}\n          />\n        </label>\n        <br />\n        <label>\n          Δ2\n          <input\n            type=\"text\"\n            name=\"delta2\"\n            value={delta2Form}\n            onChange={handleChange}\n          />\n        </label>\n        <input type=\"submit\" value=\"submit\" />\n      </form>\n      {plotE}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}